openapi: 3.0.0
info:
  description: Private Microsetta RESTful API
  version: "0.3.0-oas3"
  title: Private Microsetta RESTful API (OAS 3.0)
servers:
  - url: '/api'
paths:
  '/accounts':
    get:
      operationId: microsetta_private_api.api.find_accounts_for_login
      tags:
        - Account
      summary: Retrieve an array of accounts accessible to the provided login
      description: Retrieve an array of accounts accessible to the provided login
      parameters:
        - $ref: '#/components/parameters/language_tag'
      responses:
        '200':
          description: Array of accessible accounts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/account'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
    post:
      operationId: microsetta_private_api.api.register_account
      tags:
        - Account
      summary: Register new user account
      description: Register new user account
      parameters:
        - $ref: '#/components/parameters/language_tag'
      requestBody:
        content:
          application/json:
            # Send (non-readOnly) values of account schema PLUS kit name OR activation code
            schema:
              allOf:
                - $ref: '#/components/schemas/account'
                - type: "object"
                  properties:
                    kit_name:
                      $ref: '#/components/schemas/kit_name'
                    code:
                      $ref: '#/components/schemas/activation_code'
      responses:
        '201':
          description: Successfully registered new user account
          headers:
            Location:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'

  '/accounts/legacies':
    post:
      operationId: microsetta_private_api.api.claim_legacy_acct
      tags:
        - Account
      summary: Claim any legacy accounts for this user's email and return an array of them
      description: Claim any legacy accounts for this user's email and return an array of them
      parameters:
        - $ref: '#/components/parameters/language_tag'
      responses:
        '200':
          description: Successfully claimed legacy account(s)
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/account'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'

  '/accounts/{account_id}':
    get:
      operationId: microsetta_private_api.api.read_account
      tags:
        - Account
      summary: Get user account information
      description: Get user account information
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/language_tag'
      responses:
        '200':
          description: Successfully returned account information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
    put:
      operationId: microsetta_private_api.api.update_account
      tags:
        - Account
      summary: Update user account information
      description: Update user account information
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/language_tag'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/account'
      responses:
        '200':
          description: Successfully updated user account information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'
    
    delete:
      operationId: microsetta_private_api.admin.admin_impl.delete_account
      tags:
        - Account
        - Admin
      summary: Delete and scrub the user and sources
      description: Delete and scrub the user and sources
      parameters:
        - $ref: '#/components/parameters/account_id'
      responses:
        '204':
          description: Successfully deleted and scrubbed the account
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'

  '/accounts/{account_id}/check_duplicate_source':
    post:
      operationId: microsetta_private_api.api.check_duplicate_source_name
      tags:
        - Account
      summary: Get information about duplicate source
      description: Get information about  duplicate source
      parameters:
        - $ref: '#/components/parameters/account_id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                participant_name: # Field is named participant_name, but contents are used to fill source's name
                  $ref: '#/components/schemas/source_name'
              required:
                    - participant_name
      responses:
        '200':
          description: Successfully returned source information
          content:
            application/json:
              schema:
                type: object
                properties:
                  source_match:
                    type: boolean
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'

  '/accounts/{account_id}/email_match':
    get:
      operationId: microsetta_private_api.api.check_email_match
      tags:
        - Account
      summary: Check if email on microsetta account matches email on authentication account
      description: Check if email on microsetta account matches email on authentication account
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/language_tag'
      responses:
        '200':
          description: Successfully returned email match status
          content:
            application/json:
              schema:
                type: object
                properties:
                  email_match:
                    type: boolean
                    example: true
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'

  '/accounts/{account_id}/consent':
    get:
      operationId: microsetta_private_api.api.render_consent_doc
      tags:
        - Consent
      summary: Retrieve personalized consent form for display to user
      description: Retrieve personalized consent form for display to user
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/language_tag'
      responses:
        '200':
          description: Consent form
          content:
            application/json:
              schema:
                type: object
                properties:
                  participant_form:
                    type: object
                  consent_documents:
                    type: array
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
    post:
      operationId: microsetta_private_api.api.create_human_source_from_consent
      tags:
        - Source (from Consent)
      summary: Create a new human source based on a consent form
      description: Create a new human source based on a consent form
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/language_tag'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:  # each is a form field name
                age_range:
                  $ref: '#/components/schemas/age_range'
                participant_name:  # Field is named participant_name, but contents are used to fill source's name
                  $ref: '#/components/schemas/source_name'
                parent_1_name:
                  $ref: '#/components/schemas/parent_1_name'
                parent_2_name:
                  $ref: '#/components/schemas/parent_2_name'
                deceased_parent:
                  type: string
                  enum: ['true', 'false']
                  example: 'true'
                obtainer_name:
                  $ref: '#/components/schemas/obtainer_name'
                consent_type:
                  $ref: '#/components/schemas/consent_type'
                consent_id:
                  $ref: '#/components/schemas/consent_id'
                  
              required:
                - age_range
                - participant_name
      responses:
        '201':
          description: Successfully created new human source based on consent form
          headers:
            Location:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/human_source'
              examples:
                human_adult_source:
                  $ref: '#/components/examples/human_adult_source_w_id'
                human_child_source:
                  $ref: '#/components/examples/human_child_source_w_id'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'

  '/accounts/{account_id}/source/{source_id}/consent/{consent_type}':
    get:
      operationId: microsetta_private_api.api.check_consent_signature
      tags:
        - Consent
      summary: Validate consent signature for source
      description: Validate consent signature and respond if re-consent required
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#components/parameters/consent_type'
      responses:
        '200':
          description: Consent Signature Status
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: boolean

        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
    post:
      operationId: microsetta_private_api.api.sign_consent_doc
      tags:
        - Sign Consent
      summary: Used to sign all types of consent
      description: Use to submit new consent
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#components/parameters/consent_type'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:  # each is a form field name
                age_range:
                  $ref: '#/components/schemas/age_range'
                participant_name:  # Field is named participant_name, but contents are used to fill source's name
                  $ref: '#/components/schemas/source_name'
                parent_1_name:
                  $ref: '#/components/schemas/parent_1_name'
                parent_2_name:
                  $ref: '#/components/schemas/parent_2_name'
                deceased_parent:
                  type: string
                  enum: ['true', 'false']
                  example: 'true'
                obtainer_name:
                  $ref: '#/components/schemas/obtainer_name'
                consent_type:
                  $ref: '#/components/schemas/consent_type'
                consent_id:
                  $ref: '#/components/schemas/consent_id'
              required:
                - age_range
                - participant_name
      responses:
        '201':
          description: Successfully signed a consent document
          headers:
            Location:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: boolean
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'



  '/accounts/{account_id}/sources':
    get:
      operationId: microsetta_private_api.api.read_sources
      tags:
        - Sources
      summary: Get sources associated with account, filtered by source type if a source type is provided
      description: Get sources associated with account, filtered by source type if a source type is provided
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_type'
        - $ref: '#/components/parameters/language_tag'
      responses:
        '200':
          description: Successfully returned sources
          content:
            application/json:
              schema:
                type: array
                items:  # NB: return whole source objects, unless returning >5KB compressed data
                  oneOf:
                  - $ref: '#/components/schemas/human_source'
                  - $ref: '#/components/schemas/nonhuman_source'
              example: # explicit examples hardcoded here because connexion can't seem to infer examples for lists
                - source_id: "7cb1b4a9-5d42-42b2-9364-7bceb6630ac3"
                  source_name: "Ophelia Doe"
                  source_type: human
                  consent:
                    age_range: "18-plus"
                - source_id: "df077cd7-f2c7-42e4-b8ed-9c7e9dd47ce5"
                  source_name: "P. Doe"
                  source_type: human
                  consent:
                    age_range: "0-6"
                    child_info:
                      parent_1_name: "Demeter Doe"
                      parent_2_name: "Zeus Doe"
                      deceased_parent: false
                      obtainer_name: "Hades Doe"
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
    post:
      operationId: microsetta_private_api.api.create_source
      tags:
        - Source
      summary: Create new source of a specific type
      description: Create new source of a specific type
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/language_tag'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/human_source'
                - $ref: '#/components/schemas/nonhuman_source'
            examples:
              human_adult_source:
                $ref: '#/components/examples/human_adult_source'
              human_child_source:
                $ref: '#/components/examples/human_child_source'
              nonhuman_source:
                $ref: '#/components/examples/nonhuman_source'
      responses:
        '201':
          description: Successfully created new source
          headers:
            Location:
              schema:
                type: string
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/human_source'
                  - $ref: '#/components/schemas/nonhuman_source'
              examples:
                human_adult_source:
                  $ref: '#/components/examples/human_adult_source_w_id'
                human_child_source:
                  $ref: '#/components/examples/human_child_source_w_id'
                nonhuman_source:
                  $ref: '#/components/examples/nonhuman_source_w_id'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'

  '/accounts/{account_id}/sources/{source_id}':
    get:
      operationId: microsetta_private_api.api.read_source
      tags:
        - Source
      summary: Get information about source
      description: Get information about source
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/language_tag'
      responses:
        '200':
          description: Successfully returned source information
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/human_source'
                  - $ref: '#/components/schemas/nonhuman_source'
              examples:
                human_adult_source:
                  $ref: '#/components/examples/human_adult_source_w_id'
                human_child_source:
                  $ref: '#/components/examples/human_child_source_w_id'
                nonhuman_source:
                  $ref: '#/components/examples/nonhuman_source_w_id'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
    put:
      operationId: microsetta_private_api.api.update_source
      tags:
        - Source
      summary: Update information for source
      description: Update information for source
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/language_tag'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/human_source'
                - $ref: '#/components/schemas/nonhuman_source'
            examples:
              human_adult_source:
                $ref: '#/components/examples/human_adult_source'
              human_child_source:
                $ref: '#/components/examples/human_child_source'
              nonhuman_source:
                $ref: '#/components/examples/nonhuman_source'
      responses:
        '200':
          description: Successfully updated source information
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/human_source'
                  - $ref: '#/components/schemas/nonhuman_source'
              examples:
                human_adult_source:
                  $ref: '#/components/examples/human_adult_source_w_id'
                human_child_source:
                  $ref: '#/components/examples/human_child_source_w_id'
                nonhuman_source:
                  $ref: '#/components/examples/nonhuman_source_w_id'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'
    delete:
      operationId: microsetta_private_api.api.delete_source
      tags:
        - Source
      summary: Delete source
      description: Delete source
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/language_tag'
      responses:
        '204':
          description: Successfully deleted source
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'
          # NB: This would be returned if source cannot be deleted bc has a sample assigned to it

  '/accounts/{account_id}/sources/{source_id}/scrub':
    delete:
      operationId: microsetta_private_api.api.scrub_source
      tags:
        - Source
      summary: Scrub the source and return status
      description: Scrub (alternate to delete) the source
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/language_tag'
      responses:
        '201':
          description: Successfully scrubbed the source
          headers:
            Location:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: boolean
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'

  '/accounts/{account_id}/sources/{source_id}/survey_templates':
    get:
      operationId: microsetta_private_api.api.read_survey_templates
      tags:
        - Survey Templates
      summary: Get survey templates available to this source
      description: Get survey templates available to this source
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/language_tag'
      responses:
        '200':
          description: Successfully returned list of survey templates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/thin_survey_template_info'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
    # NB: No delete, put, or post for survey templates--can maybe expand to that for admin user in future

  '/accounts/{account_id}/sources/{source_id}/survey_templates/{survey_template_id}':
    get:
      operationId: microsetta_private_api.api.read_survey_template
      tags:
        - Survey Template
      summary: Get a particular survey template available to this source
      description: Get a particular survey template available to this source
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/survey_template_id'
        - $ref: '#/components/parameters/language_tag'
        - $ref: '#/components/parameters/survey_redirect_url'
        - $ref: '#/components/parameters/vioscreen_ext_sample_id'
        - $ref: '#/components/parameters/registration_code'
      responses:
        '200':
          description: Successfully returned a specific survey template
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/thin_survey_template_info'
                  - type: "object"
                    properties:
                      survey_template_text:
                        $ref: '#/components/schemas/survey_template_text'
                    required:
                      - survey_template_text

        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
    # NB: No delete, put, or post for a particular survey template--can maybe expand to that for admin user in future

  '/accounts/{account_id}/sources/{source_id}/surveys':
    # NB: "survey" refers to an instance of an answered survey. In contrast, the set of *questions* comprising a survey
    # is called a "survey template" (see elsewhere in this api)
    get:
      operationId: microsetta_private_api.api.read_answered_surveys
      tags:
        - Surveys (By Source)
      summary: Get answered survey instances associated with source
      description: Get answered survey instances associated with source
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/language_tag'
      responses:
        '200':
          description: Successfully returned list of answered surveys
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/thin_survey_template_info'
                    - type: "object"
                      properties:
                        survey_id:
                          $ref: '#/components/schemas/survey_id'
                        survey_status:
                          $ref: '#/components/schemas/survey_status'
                      required:
                        - survey_id
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
    post:
      operationId: microsetta_private_api.api.submit_answered_survey
      tags:
        - Survey (By Source)
      summary: Submit new answered survey
      description: Submit new answered survey
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/language_tag'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                survey_template_id:
                  $ref: '#/components/schemas/survey_template_id'
                survey_text:
                  $ref: '#/components/schemas/survey_text'
      responses:
        '201':
          description: Successfully submitted new answered survey
          headers:
            Location:
              schema:
                type: string
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'

  '/accounts/{account_id}/sources/{source_id}/surveys/{survey_id}':
    get:
      operationId: microsetta_private_api.api.read_answered_survey
      tags:
        - Survey (By Source)
      summary: Get information about an answered survey
      description: Get information about an answered survey
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/survey_id'
        - $ref: '#/components/parameters/language_tag'
      responses:
        '200':
          description: Successfully returned information about answered survey
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/thin_survey_template_info'
                  - type: "object"
                    properties:
                      survey_id:
                        $ref: '#/components/schemas/survey_id'
                      survey_status:
                        $ref: '#/components/schemas/survey_status'
                      survey_text:
                        $ref: '#/components/schemas/survey_text'
                    required:
                      - survey_id
                      - survey_text
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
    # NB: NO "put"--you shouldn't update an answered survey, but instead should take a new one
    # NB: Currently no delete ... can dissociate a survey from a sample but not delete the survey itself

  '/accounts/{account_id}/sources/{source_id}/surveys/{survey_id}/reports/topfoodreport':
    # Attempts to generate the vioscreen top food report pdf from this vioscreen survey
    get:
      # TODO: Unsure if this should be get or post- it's post on vioscreen, but
      # we can't easily embed the pdf if the link is a post.  May need to post
      # and cache results so we can make it a get for embedding.
      operationId: microsetta_private_api.api.top_food_report
      tags:
        - Survey
      summary: Generate vioscreen top food report
      description:  Generate vioscreen top food report
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/survey_id'
        - $ref: '#/components/parameters/language_tag'
      responses:
        '200':
          description: Top Food Report pdf
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'

  '/accounts/{account_id}/sources/{source_id}/samples':
    get:
      operationId: microsetta_private_api.api.read_sample_associations
      tags:
        - Samples
      summary: Get samples associated with this source
      description: Get samples associated with this source
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/language_tag'
      responses:
        '200':
          description: Successfully returned list of samples
          content:
            application/json:
              schema:
                type: array
                items:  # Returning full samples instead of just ids as their info won't be large
                  $ref: '#/components/schemas/sample'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
    post:
      operationId: microsetta_private_api.api.associate_sample
      tags:
        - Sample
      summary: Associate an unassociated sample with this source
      description: Associate an unassociated sample with this source
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/language_tag'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                sample_id:
                  # NB: Getting the sample id to input here is outside the scope of this endpoint--see kits
                  # NB: Can't use $ref: '#/components/schemas/sample_id' here because that is a readOnly property
                  # and thus is NOT SENT with posts (the readOnly functionality didn't really anticipate
                  # this use case of creating a new *association* rather than creating a new *object*).
                  type: string
                  example: "384fd128-3a42-4a6b-a37c-3fc3cbf027bc"
              required:
                - sample_id
      responses:
        '201':
          description: Successfully associated sample with source
          headers:
            Location:
              schema:
                type: string
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'

  '/accounts/{account_id}/sources/{source_id}/samples/{sample_id}':
    # NB: info about the sample--type, datetime, notes--does NOT exist *separate* from source association, so
    # it can only be read/updated/deleted in the context of a source association
    get:
      operationId: microsetta_private_api.api.read_sample_association
      tags:
        - Sample
      summary: Get information about a sample associated with this source
      description:  Get information about a sample associated with this source
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/sample_id'
        - $ref: '#/components/parameters/language_tag'
      responses:
        '200':
          description: Successfully returned sample information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sample'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
    put:
      operationId: microsetta_private_api.api.update_sample_association
      tags:
        - Sample
      summary: Update information about a sample associated with this source
      description:  Update information about a sample associated with this source
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/sample_id'
        - $ref: '#/components/parameters/language_tag'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sample'
      responses:
        '200':
          description: Successfully updated sample information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sample'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '422':
          # NB: This error would cover the case where you can't update a sample's info bc we already received it
          $ref: '#/components/responses/422UnprocessableEntity'
    delete:
      tags:
        - Sample
      operationId: microsetta_private_api.api.dissociate_sample
      summary: Dissociate a sample from a source and any of its associated surveys
      description: Dissociate a sample from a source and any of its associated surveys
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/sample_id'
        - $ref: '#/components/parameters/language_tag'
      responses:
        '204':
          description: Sample was dissociated from source and source's surveys
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '422':
          # NB: This error would cover the case where you can't dissociate it bc it was already processed
          $ref: '#/components/responses/422UnprocessableEntity'

  '/accounts/{account_id}/sources/{source_id}/vioscreen/session':
    get:
      operationId: microsetta_private_api.api.read_vioscreen_session
      tags:
        - Vioscreen
      summary: Get information about a Vioscreen session associated with a sample
      description: Get information about a Vioscreen session associated with a sample
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/vioscreen_ext_sample_id'
        - $ref: '#/components/parameters/registration_code'
        - $ref: '#/components/parameters/timestamp'
      responses:
      responses:
        '200':
          description: Successfully returned session information
          content:
            application/json:
              schema:
                type:
                  object
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'

  '/accounts/{account_id}/sources/{source_id}/vioscreen/percentenergy':
    get:
      operationId: microsetta_private_api.api.read_vioscreen_percent_energy
      tags:
        - Vioscreen
      summary: Get information about a Vioscreen percent energy associated with a sample
      description: Get information about a Vioscreen percent energy associated with a sample
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/vioscreen_ext_sample_id'
        - $ref: '#/components/parameters/registration_code'
        - $ref: '#/components/parameters/timestamp'
      responses:
        '200':
          description: Successfully returned percent energy information
          content:
            application/json:
              schema:
                type:
                  object
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'

  '/accounts/{account_id}/sources/{source_id}/vioscreen/dietaryscore':
    get:
      operationId: microsetta_private_api.api.read_vioscreen_dietary_score
      tags:
        - Vioscreen
      summary: Get information about a Vioscreen dietary score associated with a sample
      description: Get information about a Vioscreen dietary score associated with a sample
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/vioscreen_ext_sample_id'
        - $ref: '#/components/parameters/registration_code'
        - $ref: '#/components/parameters/timestamp'
      responses:
        '200':
          description: Successfully returned dietary score information
          content:
            application/json:
              schema:
                type:
                  array
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'

  '/accounts/{account_id}/sources/{source_id}/vioscreen/supplements':
    get:
      operationId: microsetta_private_api.api.read_vioscreen_supplements
      tags:
        - Vioscreen
      summary: Get information about a Vioscreen supplements associated with a sample
      description: Get information about a Vioscreen supplements associated with a sample
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/vioscreen_ext_sample_id'
        - $ref: '#/components/parameters/registration_code'
        - $ref: '#/components/parameters/timestamp'
      responses:
        '200':
          description: Successfully returned supplements information
          content:
            application/json:
              schema:
                type:
                  object
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'

  '/accounts/{account_id}/sources/{source_id}/vioscreen/foodcomponents':
    get:
      operationId: microsetta_private_api.api.read_vioscreen_food_components
      tags:
        - Vioscreen
      summary: Get information about a Vioscreen food components associated with a sample
      description: Get information about a Vioscreen food components associated with a sample
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/vioscreen_ext_sample_id'
        - $ref: '#/components/parameters/registration_code'
        - $ref: '#/components/parameters/timestamp'
      responses:
        '200':
          description: Successfully returned food components information
          content:
            application/json:
              schema:
                type:
                  object
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'

  '/accounts/{account_id}/sources/{source_id}/vioscreen/eatingpatterns':
    get:
      operationId: microsetta_private_api.api.read_vioscreen_eating_patterns
      tags:
        - Vioscreen
      summary: Get information about a Vioscreen eating patterns associated with a sample
      description: Get information about a Vioscreen eating patterns associated with a sample
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/vioscreen_ext_sample_id'
        - $ref: '#/components/parameters/registration_code'
        - $ref: '#/components/parameters/timestamp'
      responses:
        '200':
          description: Successfully returned eating patterns information
          content:
            application/json:
              schema:
                type:
                  object
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'

  '/accounts/{account_id}/sources/{source_id}/vioscreen/mpeds':
    get:
      operationId: microsetta_private_api.api.read_vioscreen_mpeds
      tags:
        - Vioscreen
      summary: Get information about a Vioscreen mpeds associated with a sample
      description: Get information about a Vioscreen mpeds associated with a sample
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/vioscreen_ext_sample_id'
        - $ref: '#/components/parameters/registration_code'
        - $ref: '#/components/parameters/timestamp'
      responses:
        '200':
          description: Successfully returned mpeds information
          content:
            application/json:
              schema:
                type:
                  object
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'

  '/accounts/{account_id}/sources/{source_id}/vioscreen/foodconsumption':
    get:
      operationId: microsetta_private_api.api.read_vioscreen_food_consumption
      tags:
        - Vioscreen
      summary: Get information about a Vioscreen food consumption associated with a sample
      description: Get information about a Vioscreen food consumption associated with a sample
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/vioscreen_ext_sample_id'
        - $ref: '#/components/parameters/registration_code'
        - $ref: '#/components/parameters/timestamp'
      responses:
        '200':
          description: Successfully returned food consumption information
          content:
            application/json:
              schema:
                type:
                  object
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'

  '/admin/vioscreen/username_to_barcode':
    get:
      operationId: microsetta_private_api.admin.admin_impl.get_vioscreen_sample_to_user
      tags:
        - Vioscreen
      summary: Obtain a mapping from Vioscreen username to associated barcode
      description: Obtain a mapping from Vioscreen username to associated barcode
      responses:
        '200':
          description: Successfully returned username mapping
          content:
            application/json:
              schema:
                type:
                  object
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'

  '/vioscreen/dietaryscore/type/{score_type}/code/{score_code}':
    get:
      operationId: microsetta_private_api.api.get_vioscreen_dietary_scores_by_component
      tags:
        - Vioscreen
      summary: Get information about Vioscreen dietary scores for a specific component
      description: Get information about Vioscreen dietary scores for a specific component
      parameters:
        - $ref: '#/components/parameters/score_type'
        - $ref: '#/components/parameters/score_code'
      responses:
        '200':
          description: Successfully returned dietary score information
          content:
            application/json:
              schema:
                type:
                  object
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'

  '/vioscreen/{account_id}/sources/{source_id}/vioscreen_sessions':
    get:
      operationId: microsetta_private_api.api.get_vioscreen_sessions
      tags:
        - Vioscreen
      summary: Get information about Vioscreens
      description: Get information about Vioscreens
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
      responses:
        '200':
          description: Successfully returned vioscreens
          content:
            application/json:
              schema:
                type:
                  array
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'

  '/vioscreen/dietaryscore/':
    get:
      operationId: microsetta_private_api.api.get_vioscreen_dietary_scores_descriptions
      tags:
        - Vioscreen
      summary: Get information about Vioscreen dietary scores descriptions
      description: Get information about Vioscreen dietary scores descriptions
      responses:
        '200':
          description: Successfully returned dietary scores information
          content:
            application/json:
              schema:
                type:
                  object
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'

  '/vioscreen/foodcomponents/code/{fc_code}':
    get:
      operationId: microsetta_private_api.api.get_vioscreen_food_components_by_code
      tags:
        - Vioscreen
      summary: Get information about Vioscreen food components for a specific code
      description: Get information about Vioscreen food components for a specific code
      parameters:
        - $ref: '#/components/parameters/fc_code'
      responses:
        '200':
          description: Successfully returned food components information
          content:
            application/json:
              schema:
                type:
                  object
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'

  '/vioscreen/foodcomponents':
    get:
      operationId: microsetta_private_api.api.get_vioscreen_food_components_descriptions
      tags:
        - Vioscreen
      summary: Get information about Vioscreen food components descriptions
      description: Get information about Vioscreen food components descriptions
      responses:
        '200':
          description: Successfully returned food components information
          content:
            application/json:
              schema:
                type:
                  object
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'

  # NB: "surveys" is used as a path component in two different ways (here nested under sample and above nested
  # directly under source.  The dev team assessed this and decided this dual usage was not unacceptably confusing.
  '/accounts/{account_id}/sources/{source_id}/samples/{sample_id}/surveys':
    get:
      operationId: microsetta_private_api.api.read_answered_survey_associations
      tags:
        - Surveys (By Sample)
      summary: Get list of answered surveys associated with this sample
      description: Get list of answered surveys associated with this sample
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/sample_id'
        - $ref: '#/components/parameters/language_tag'
      responses:
        '200':
          description: Successfully returned list of answered surveys associated with this sample
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/thin_survey_template_info'
                    - type: "object"
                      properties:
                        survey_id:
                          $ref: '#/components/schemas/survey_id'
                        survey_status:
                          $ref: '#/components/schemas/survey_status'
                      required:
                        - survey_id
              example: # explicit examples hardcoded here because connexion can't seem to infer examples for lists
                - survey_id: 1a7697cc-e202-4397-b12c-ab7e6d23bebd
                  survey_template_id: bb5ca7de-98ae-457c-99c5-419931824d1c
                  survey_template_title: "Food Frequency Questionnaire"
                  survey_template_version: "1.2"
                  survey_template_type: remote
                - survey_id: a302f47c-8090-4ecd-b92f-14331b2807d3
                  survey_template_id: 2afb9f63-c733-4fc6-b2c4-e5ccac8331ff
                  survey_template_title: "Dream Survey"
                  survey_template_version: "0.1"
                  survey_template_type: local
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
    post:
      operationId: microsetta_private_api.api.associate_answered_survey
      tags:
        - Survey (By Sample)
      summary: Associate an answered survey with this sample
      description: Associate an answered survey with this sample
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/sample_id'
        - $ref: '#/components/parameters/language_tag'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                survey_id:
                  $ref: '#/components/schemas/survey_id'
      responses:
        '201':
          description: Successfully associated answered survey with sample
          headers:
            Location:
              schema:
                type: string
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'

  '/accounts/{account_id}/sources/{source_id}/samples/{sample_id}/surveys/{survey_id}':
    # NB: I can't really see a way that this can be updated, or even viewed--the association simply exists or doesn't
    delete:
      tags:
        - Survey (By Sample)
      operationId: microsetta_private_api.api.dissociate_answered_survey
      summary: Dissociate an answered survey from a sample
      description: Dissociate an answered survey from a sample
      parameters:
        - $ref: '#/components/parameters/account_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/sample_id'
        - $ref: '#/components/parameters/survey_id'
        - $ref: '#/components/parameters/language_tag'
      responses:
        '204':
          description: Answered survey was dissociated from sample
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'

  '/slots/myfoodrepo/':
    get:
      operationId: microsetta_private_api.api.read_myfoodrepo_available_slots
      tags:
        - Surveys
      summary: Get the number of open myfoodrepo annotator slots
      description: Get the number of open myfoodrepo annotator slots
      parameters:
        - $ref: '#/components/parameters/language_tag'
      responses:
        '200':
          description: Successfully returned the number of slots
          content:
            application/json:
              schema:
                type: object
                properties:
                  number_of_available_slots:
                    type: integer
                  total_number_of_slots:
                    type: integer
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'

  '/kits/':
    get:
      operationId: microsetta_private_api.api.read_kit
      tags:
        - Kit Samples
      summary: Get list of samples in kit that are not assigned to a source
      description: Get list of samples in kit that are not assigned to a source
      parameters:
        - $ref: '#/components/parameters/kit_name'
        - $ref: '#/components/parameters/language_tag'
      responses:
        '200':
          description: Successfully returned list of unassigned samples
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/sample'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'

  '/can_activate':
    get:
      operationId: microsetta_private_api.api.check_activation
      tags:
        - Activation
      summary: Check if email, code pair can be activated
      description: Check if email, code pair can be activated
      parameters:
        - $ref: '#/components/parameters/email'
        - $ref: '#/components/parameters/activation_code'
      responses:
        '200':
          description: can_activate T/F and error string if unable to activate
          content:
            application/json:
              schema:
                type: object
                properties:
                  can_activate:
                    type: boolean
                  error:
                    type: string
                    nullable: true

  '/campaign_information':
    get:
      operationId: microsetta_private_api.api.get_campaign_information
      tags:
        - Campaigns
      summary: Get campaign information based on provided campaign_id
      description: Get campaign information based on provided campaign_id
      security: []
      parameters:
        - in: query
          name: campaign_id
          description: unique identifier of campaign to get information for
          required: true
          schema:
            type: string
      responses:
        '200':
          description: campaign information
          content:
            application/json:
              schema:
                type: object
    post:
      operationId: microsetta_private_api.admin.admin_impl.post_campaign_information
      tags:
        - Campaigns
        - Admin
      summary: Create campaign
      description: Create campaign
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                'title':
                  type: string
                'instructions':
                  type: string
                'permitted_countries':
                  type: string
                'language_key':
                  type: string
                'accepting_participants':
                  type: string
                'associated_projects':
                  type: string
                'language_key_alt':
                  type: string
                'title_alt':
                  type: string
                'instructions_alt':
                  type: string
                'extension':
                  type: string
                'send_thdmi_confirmation':
                  type: string
              required:
                - title
                - associated_projects
      responses:
        '200':
          description: campaign information
          content:
            application/json:
              schema:
                type: object
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
    put:
      operationId: microsetta_private_api.admin.admin_impl.put_campaign_information
      tags:
        - Campaigns
        - Admin
      summary: Update campaign
      description: Update campaign
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                'campaign_id':
                  type: string
                'title':
                  type: string
                'instructions':
                  type: string
                'permitted_countries':
                  type: string
                'language_key':
                  type: string
                'accepting_participants':
                  type: string
                'language_key_alt':
                  type: string
                'title_alt':
                  type: string
                'instructions_alt':
                  type: string
                'extension':
                  type: string
                'send_thdmi_confirmation':
                  type: string
              required:
                - campaign_id
                - title
      responses:
        '200':
          description: campaign information
          content:
            application/json:
              schema:
                type: object
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'

  '/interested_user':
    post:
      operationId: microsetta_private_api.api.create_interested_user
      tags:
        - Campaigns
      summary: Submit interested user's information
      description: Submit interested user's information
      security: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                'campaign_id':
                  type: string
                'acquisition_source':
                  type: string
                'first_name':
                  type: string
                'last_name':
                  type: string
                'email':
                  type: string
                'phone':
                  type: string
                'country':
                  type: string
                'address_1':
                  type: string
                'address_2':
                  type: string
                'address_3':
                  type: string
                'city':
                  type: string
                'state':
                  type: string
                'postal':
                  type: string
                'confirm_consent':
                  type: string
                'ip_address':
                  type: string
                'over_18':
                  type: string
                'residential_address':
                  type: string
              required:
                - campaign_id
                - first_name
                - last_name
                - email
      responses:
        '200':
          description: Interested user ID
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Creation or validation issue with the interested user

  '/update_address':
    get:
      operationId: microsetta_private_api.api.get_interested_user_address_update
      tags:
        - Campaigns
      summary: Retrieve an interested user's address to fix validation error
      description: Retrieve an interested user's address to fix validation error
      security: [ ]
      parameters:
        - in: query
          name: interested_user_id
          description: unique identifier of interested user
          required: true
          schema:
            type: string
        - in: query
          name: email
          description: interested user's email address
          required: true
          schema:
            type: string
      responses:
        '200':
          description: interested user's address information
          content:
            application/json:
              schema:
                type: object
                properties:
                  'interested_user_id':
                    type: string
                  'email':
                    type: string
                  'address_1':
                    type: string
                  'address_2':
                    type: string
                  'city':
                    type: string
                  'state':
                    type: string
                  'postal_code':
                    type: string
                  'country':
                    type: string
        '400':
          description: Address already valid
        '404':
          $ref: '#/components/responses/404NotFound'
    put:
      operationId: microsetta_private_api.api.put_interested_user_address_update
      tags:
        - Campaigns
      summary: Update an interested user's address
      description: Update an interested user's address
      security: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                'interested_user_id':
                  type: string
                'email':
                  type: string
                'address_1':
                  type: string
                'address_2':
                  type: string
                'address_3':
                  type: string
                'city':
                  type: string
                'state':
                  type: string
                'postal':
                  type: string
                'residential_address':
                  type: boolean
              required:
                - interested_user_id
                - email
                - address_1
                - city
                - state
                - postal
      responses:
        '200':
          description: Interested user ID
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Update or validation issue with the interested user's address
        '404':
          $ref: '#/components/responses/404NotFound'

  '/preparations/{sample_barcode}':
    get:
      operationId: microsetta_private_api.api.get_preparations
      tags:
        - Stats
      parameters:
        - $ref: '#/components/parameters/sample_barcode'
      responses:
        '200':
          description: Return list of preparations associated with barcode
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/preparation'


  # ADMINISTRATOR PATHS
  '/admin/search/samples/{sample_barcode}':
    get:
      operationId: microsetta_private_api.admin.admin_impl.search_barcode
      tags:
        - Admin
      summary: Retrieve diagnostic information about a sample by barcode
      description: Retrieve diagnostic information about a sample by barcode
      parameters:
        - $ref: '#/components/parameters/sample_barcode'
      responses:
        '200':
          description: Object containing linked account (if any), source (if any), sample (if any) and information about the barcode
          content:
            application/json:
              schema:
                type: object
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'

  '/admin/search/kit/{kit_id}':
    get:
      operationId: microsetta_private_api.admin.admin_impl.search_kit_id
      tags:
        - Admin
      summary: Retrieve diagnostic information about a kit by kit_id
      description: Retrieve diagnostic information about a kit by kit_id
      parameters:
        - in: path
          name: kit_id
          description: User-facing id of kit
          schema:
            $ref: '#/components/schemas/kit_name'
          required: true
      responses:
        '200':
          description: Object containing linked account (if any), source (if any), sample (if any) and information about the barcode
          content:
            application/json:
              schema:
                type: object
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'

  '/admin/search/account/{email}':
    get:
      operationId: microsetta_private_api.admin.admin_impl.search_email
      tags:
        - Admin
      summary: Retrieve diagnostic information about an account by email
      description: Retrieve diagnostic information about an account by email
      parameters:
        - in: path
          name: email
          description: user email address
          schema:
            type: string
            example: "test@test.com"
          required: true
      responses:
        '200':
          description: Object containing accounts with similar emails (if any)
          content:
            application/json:
              schema:
                type: object
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'

  '/admin/search/interested_users/{email}':
    get:
      operationId: microsetta_private_api.admin.admin_impl.search_interested_users_by_email
      tags:
        - Admin
      summary: Find interested users by email
      description: Find interested users by email
      parameters:
        - in: path
          name: email
          description: email address
          schema:
            type: string
            example: "test@test.com"
          required: true
      responses:
        '200':
          description: Object containing interested users with similar emails (if any)
          content:
            application/json:
              schema:
                type: object
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'

  '/admin/interested_user/{iuid}':
    get:
      operationId: microsetta_private_api.admin.admin_impl.get_interested_user_by_id
      tags:
        - Admin
      summary: Get interested user by ID
      description: Get interested user by Id
      parameters:
        - in: path
          name: iuid
          description: Interested user ID
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Interested user's information
          content:
            application/json:
              schema:
                type: object
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
    put:
      operationId: microsetta_private_api.admin.admin_impl.put_interested_user_by_id
      tags:
        - Admin
      summary: Update interested user
      description: Update interested user
      parameters:
        - in: path
          name: iuid
          description: Interested user ID
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                'address_1':
                  type: string
                'address_2':
                  type: string
                'city':
                  type: string
                'state':
                  type: string
                'postal':
                  type: string
              required:
                - address_1
                - city
                - state
                - postal
      responses:
        '200':
          description: Interested user's updated information
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Failed to update address
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'

  '/admin/search/activation':
    get:
      operationId: microsetta_private_api.admin.admin_impl.search_activation
      tags:
        - Admin
      summary: Retrieve diagnostic information about activation codes by email or code
      description: Retrieve diagnostic information about activation codes by email or code
      parameters:
        - in: query
          name: email_query
          schema:
            type: string
        - in: query
          name: code_query
          schema:
            type: string
      responses:
        '200':
          description: Object containing activation info with similar emails or codes (if any)
          content:
            application/json:
              schema:
                type: array
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'

  '/admin/verify_address':
    get:
      operationId: microsetta_private_api.admin.admin_impl.address_verification
      tags:
        - Admin
      security: []
      summary: Verify - and automatically correct if possible - the deliverability of a postal address using Melissa Global Address API
      description: Verify - and automatically correct if possible - the deliverability of a postal address using Melissa Global Address API
      parameters:
        - in: query
          name: address_1
          description: First line of address to verify (e.g. street address)
          required: true
          schema:
            type: string
        - in: query
          name: address_2
          description: Second line of address to verify (e.g. apartment, suite, floor)
          required: false
          schema:
            type: string
        - in: query
          name: address_3
          description: Third line of address to verify
          required: false
          schema:
            type: string
        - in: query
          name: city
          description: City of address to verify
          required: false
          schema:
            type: string
        - in: query
          name: state
          description: State/province of address to verify
          required: false
          schema:
            type: string
        - in: query
          name: postal
          description: Postal code of address to verify
          required: true
          schema:
            type: string
        - in: query
          name: country
          description: Country of address to verify
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Object containing address and verification status
          content:
            application/json:
              schema:
                type: object
        '404':
          $ref: '#/components/responses/404NotFound'

  '/admin/campaigns/list':
    get:
      operationId: microsetta_private_api.admin.admin_impl.list_campaigns
      tags:
        - Admin
      summary: Return a list of all campaigns
      description: Return a list of all campaigns
      responses:
        '200':
          description: Array of campaigns
          content:
            application/json:
              schema:
                type: array
        '401':
          $ref: '#/components/responses/401Unauthorized'

  '/admin/scan/{sample_barcode}':
    post:
      # Note: We might want to be able to differentiate system administrator operations
      # from technician operations in the future by user accounts and the routes they post to
      operationId: microsetta_private_api.admin.admin_impl.scan_barcode
      tags:
        - Admin
      summary: Set sample processing information for a barcode
      description: Set sample processing information for a barcode
      parameters:
        - $ref: '#/components/parameters/sample_barcode'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                sample_status:
                  type: string
                  # NB: there is no "not-received" option
                  # because how can one be scanning a barcode
                  # one didn't receive?
                  enum: ["sample-is-valid",
                         "no-associated-source",
                         "no-registered-account",
                         "no-collection-info",
                         "sample-has-inconsistencies",
                         "received-unknown-validity"]
                  example: "sample-has-inconsistencies"
                technician_notes:
                  type: string
                  example: "Sample Processing Complete!"
      responses:
        '201':
          description: Successfully recorded new barcode scan
          headers:
            Location:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object

  '/admin/metadata/samples/{sample_barcode}/surveys/{survey_template_id}':
    get:
      operationId: microsetta_private_api.admin.admin_impl.sample_pulldown_single_survey
      tags:
        - Admin
      summary: Retrieve survey responses for a particular sample and survey
      description: Retrieve survey responses for a particular sample and survey
      parameters:
        - $ref: '#/components/parameters/sample_barcode'
        - $ref: '#/components/parameters/survey_template_id'
      responses:
        '200':
          description: QIIME-compatible sample metadata
          content:
            application/json:
              schema:
                type: object
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'

  '/admin/metadata/samples/{sample_barcode}/surveys/':
    get:
      operationId: microsetta_private_api.admin.admin_impl.sample_pulldown_multiple_survey
      tags:
        - Admin
      summary: Retrieve all survey responses for a particular sample
      description: Retrieve all survey responses for a particular sample
      parameters:
        - $ref: '#/components/parameters/sample_barcode'
      responses:
        '200':
          description: Summarized sample metadata
          content:
            application/json:
              schema:
                type: object
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'

  '/admin/metadata/qiita-compatible':
    post:
      operationId: microsetta_private_api.admin.admin_impl.qiita_compatible_metadata
      tags:
        - Admin
      summary: Retrieve Qiita compatible metadata in JSON for a set of samples
      description: Retrieve Qiita compatible metadata in JSON for a set of samples
      parameters:
        - $ref: '#/components/parameters/include_private'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                'sample_barcodes':
                  type: array
                  items:
                    # not using the defined schema for sample_barcode as it is
                    # readOnly
                    type: string
      responses:
        '200':
          description: Summarized sample metadata
          content:
            application/json:
              schema:
                type: object
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'

  '/admin/projects':
    get:
      operationId: microsetta_private_api.admin.admin_impl.get_projects
      tags:
        - Admin
      summary: Retrieve a list of existing projects
      description: Retrieve a list of existing projects
      parameters:
        - $ref: '#/components/parameters/include_stats'
        - $ref: '#/components/parameters/is_active'
      responses:
        '200':
          description: Array of projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/project'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
    post:
      operationId: microsetta_private_api.admin.admin_impl.create_project
      tags:
        - Admin
      summary: Create a project to which kits can be associated
      description: Create a project to which kits can be associated
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/project'
      responses:
        '201':
          description: Project successfully created
          headers:
            Location:
              schema:
                type: string
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'

  '/admin/projects/{project_id}':
    put:
      operationId: microsetta_private_api.admin.admin_impl.update_project
      tags:
        - Admin
      summary: Update information about a project
      description:  Update information about a project
      parameters:
        - $ref: '#/components/parameters/project_id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/project'
      responses:
        '204':
          # Returns 204 rather than 200 (with a project object) bc don't want
          # to recalculate stats (which won't have been changed by update)
          description: Successfully updated sample information
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'

  '/admin/create/kits':
    post:
      operationId: microsetta_private_api.admin.admin_impl.create_kits
      tags:
        - Admin
      summary: Create kit identifiers and associated sample barcodes
      description: Create kit identifiers and associated sample barcodes
      requestBody:
        content:
          application/json:
            schema:
                type: "object"
                properties:
                  number_of_kits:
                    type: integer
                  number_of_samples:
                    type: integer
                  kit_id_prefix:
                    type: string
                  project_ids:
                    type: array
                    items:
                      type: string
                required:
                  - number_of_kits
                  - number_of_samples
                  - project_ids
      responses:
        '201':
          description: Kit identifiers and associated samples were successfully created
          content:
            application/json:
              schema:
                type: object
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'

  '/admin/events/accounts/{account_id}':
    get:
      operationId: microsetta_private_api.admin.admin_impl.get_account_events
      tags:
        - Admin
      parameters:
        - $ref: '#/components/parameters/account_id'
      responses:
        '200':
          description: Event log associated with the account
          content:
            application/json:
              schema:
                type: array
  '/admin/email':
    post:
      operationId: microsetta_private_api.admin.admin_impl.send_email
      tags:
        - Admin
      summary: Send a templated email to an end user
      description: Send a templated email to an end user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                # issue type defines what resolution_url the user should go to
                issue_type:
                  type: string
                  enum: ["sample", "activation"]
                template:
                  type: string
                  enum: ["incorrect_sample_type",
                         "missing_sample_info",
                         "sample_is_valid",
                         "no_associated_source",
                         "send_activation_code"]
                  example: "incorrect_sample_type"
                template_args:
                  type: object
      responses:
        '204':
          description: Email sent

  '/admin/daklapack_articles':
    get:
      operationId: microsetta_private_api.admin.admin_impl.get_daklapack_articles
      tags:
        - Admin
      responses:
        '200':
          description: Return list of dictionaries of full info on all daklapack articles
          content:
            application/json:
              schema:
                type: array

  '/admin/daklapack_shipping':
    get:
      operationId: microsetta_private_api.admin.admin_impl.get_daklapack_shipping_options
      tags:
        - Admin
      responses:
        '200':
          description: Return lists of acceptable Daklapack shipping types keyed by shipping provider
          content:
            application/json:
              schema:
                type: object

  '/admin/daklapack_orders':
    post:
      operationId: microsetta_private_api.admin.admin_impl.create_daklapack_orders
      tags:
        - Admin
      summary: Submit new order(s) to Daklapack and record to db
      description: Submit new order(s) to Daklapack and record to db
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                project_ids:
                  type: array
                  items:
                    type: integer
                article_code:
                  type: string
                quantity:
                  type: integer
                addresses:
                  type: array
                  items:
                    type: object
                shipping_provider:
                  type: string
                shipping_type:
                  type: string
                description:
                  type: string
                  nullable: true
                fedex_ref_1:
                  type: string
                  nullable: true
                fedex_ref_2:
                  type: string
                  nullable: true
                fedex_ref_3:
                  type: string
                  nullable: true
                planned_send_date:
                  type: string
                  format: date-time
                  example: "2007-04-05"
                  nullable: true
      responses:
        '200':
          description: Order submission(s) attempted

  '/admin/account_email_summary':
    post:
      operationId: microsetta_private_api.admin.admin_impl.query_email_stats
      tags:
        - Admin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                # issue type defines what resolution_url the user should go to
                emails:
                  type: array
                  items:
                    $ref: '#/components/schemas/email'
                project:
                  type: string
                  nullable: true
      responses:
        '200':
          description: Return list of dictionaries of sample status for requested accounts
          content:
            application/json:
              schema:
                type: array

  '/admin/account_project_barcode_summary':
    post:
      operationId: microsetta_private_api.admin.admin_impl.query_project_barcode_stats
      parameters:
        - $ref: '#/components/parameters/strip_sampleid'
      tags:
        - Admin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                'project':
                  type: integer
                'email':
                  type: string

      responses:
        '200':
          description: Successfully triggered the summary job
        '404':
          description: Requested project not found
        '400':
          description: Too many barcodes requested

  '/admin/account_barcode_summary':
    post:
      operationId: microsetta_private_api.admin.admin_impl.query_barcode_stats
      parameters:
        - $ref: '#/components/parameters/strip_sampleid'
      tags:
        - Admin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                'sample_barcodes':
                  type: array
                  items:
                    # not using the defined schema for sample_barcode as it is
                    # readOnly
                    type: string
      responses:
        '200':
          description: Return an object containing a list of dictionaries of sample status for requested accounts
          content:
            application/json:
              schema:
                type: object
        '404':
          description: Requested barcodes not found

  '/admin/activation':
    post:
      operationId: microsetta_private_api.admin.admin_impl.generate_activation_codes
      tags:
        - Admin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                emails:
                  type: array
                  items:
                    $ref: '#/components/schemas/email'
      responses:
        '200':
          description: Returns array of activation information
          content:
            application/json:
              schema:
                type: array

  '/admin/barcode_query_fields':
    get:
      operationId: microsetta_private_api.admin.admin_impl.list_barcode_query_fields
      tags:
        - Admin
      responses:
        '200':
          description: Returns array of fields, types and values
          content:
            application/json:
              schema:
                type: array

  '/admin/barcode_query':
    post:
      operationId: microsetta_private_api.admin.admin_impl.barcode_query
      tags:
        - Admin
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Returns array of barcodes
          content:
            application/json:
              schema:
                type: array
                items:
                  # not using the defined schema for sample_barcode as it is
                  # readOnly
                  type: string

  '/admin/qiita_barcode_query':
    post:
      operationId: microsetta_private_api.admin.admin_impl.qiita_barcode_query
      tags:
        - Admin
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Returns qiita info about barcodes
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object

components:
  parameters:
    # path parameters
    account_id: # Can be referenced as '#/components/parameters/account_id'
      name: account_id
      in: path
      description: Unique id specifying a user account
      schema:
        $ref: '#/components/schemas/account_id'
      required: true
    strip_sampleid:
      name: strip_sampleid
      in: query
      description: Whether to strip barcode information
      schema:
        type: boolean
      required: true
    kit_id:
      name: kit_id
      in: path
      description: Unique internal id specifying a kit
      schema:
        type: string
        example: "c442f31d-fa17-4fd1-85e2-1f251d13ec26"
      required: true
    sample_id:
      name: sample_id
      in: path
      description: Unique id specifying a sample associated with a source
      schema:
        $ref: '#/components/schemas/sample_id'
      required: true
    survey_id:
      name: survey_id
      in: path
      description: Unique internal id specifying a particular answered survey
      schema:
        $ref: '#/components/schemas/survey_id'
      required: true
    survey_template_id:
      name: survey_template_id
      in: path
      description: Unique internal id specifying a particular survey template
      schema:
        $ref: '#/components/schemas/survey_template_id'
      required: true
    source_id:
      name: source_id
      in: path
      description: Unique id specifying a source
      schema:
        $ref: '#/components/schemas/source_id'
      required: true
    sample_barcode:
      name: sample_barcode
      in: path
      description: barcode of sample
      schema:
        $ref: '#/components/schemas/sample_barcode'
      required: true
    project_id:
      name: project_id
      in: path
      description: Project ID
      schema:
        $ref: '#/components/schemas/project_id'
    score_type:
      name: score_type
      in: path
      description: Dietary Score Type
      schema:
        $ref: '#/components/schemas/score_type'
    score_code:
      name: score_code
      in: path
      description: Dietary Score Code
      schema:
        $ref: '#/components/schemas/score_code'
    fc_code:
      name: fc_code
      in: path
      description: Food Components Code
      schema:
        $ref: '#/components/schemas/fc_code'

    consent_type:
      name: consent_type
      in: path
      description: Type of consent
      schema:
        $ref: '#/components/schemas/consent_type'

    # query parameters
    activation_code:
      name: code
      in: query
      description: Activation code
      schema:
        $ref: '#/components/schemas/activation_code'
      required: true
    email:
      name: email
      in: query
      description: User's email
      schema:
        $ref: '#/components/schemas/email'
      required: true
    kit_name:
      name: kit_name
      in: query
      description: User-facing id of kit
      schema:
        $ref: '#/components/schemas/kit_name'
      required: true
    language_tag:
      name: language_tag
      in: query
      description: 5-character code made up of ISO 639-1 two-character lower-ase language code (e.g., "es") separated
        by a hyphen from a two-character upper-case country code (e.g., "MX") for a complete code like "es-MX"
      schema:
        $ref: '#/components/schemas/language_tag'
      required: true
    consent_post_url:
      name: consent_post_url
      in: query
      description: Client url to which the customized consent form should be posted.
      schema:
        type: string
        example: "https://www.microsetta.org/accounts/72d2cc55-8522-4528-a85b-78be2ec0933f/create_human_source"
    survey_redirect_url:
      name: survey_redirect_url
      in: query
      description: Url that some external surveys will redirect browser to after survey completion
      schema:
        type: string
        example: "https://www.microsetta.org/accounts/72d2cc55-8522-4528-a85b-78be2ec0933f/sources/bfed3a1b-0855-4dce-9398-7c54f5b4ac8f"
    vioscreen_ext_sample_id:
      name: vioscreen_ext_sample_id
      in: query
      description: Identifies sample for vioscreen templates, indicates the user is being redirected to the response url and so vioscreen id should be logged
      schema:
        $ref: '#/components/schemas/sample_id'
      required: False
    registration_code:
      name: registration_code
      in: query
      description: Identifies activation code for vioscreen sessions, indicates the user is being redirected using activation code
      schema:
        $ref: '#/components/schemas/registration_code'
      required: False
    timestamp:
      name: timestamp
      in: query
      description: required creation time for vioscreen sessions
      schema:
        $ref: '#/components/schemas/creation_time'
      required: False

    source_type:
      name: source_type
      in: query
      description: Type of sample
      schema:
        $ref: '#/components/schemas/source_type'
    is_active:
      name: is_active
      in: query
      description: active status of projects by which to limit returned project list; may be true or false. Optional.
      schema:
        $ref: '#/components/schemas/is_active'
    include_stats:
      name: include_stats
      in: query
      description: true if computed statistics about projects should be included in projects list (takes longer)
      schema:
        type: boolean
    include_private:
      name: include_private
      in: query
      description: include private information in a metadata pulldown; may be true or false. Optional.
      schema:
        $ref: '#/components/schemas/include_private'

  responses:
    401Unauthorized:   # Can be referenced as '#/components/responses/401Unauthorized'
      description: Invalid or missing token.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    403Forbidden:   # Can be referenced as '#/components/responses/403Forbidden'
      description: Authorization refused.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    404NotFound:       # Can be referenced as '#/components/responses/404NotFound'
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    422UnprocessableEntity:
      description: The instructions provided cannot be processed.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
    # account section
    account_id:
      type: string
      readOnly: true
      example: "aaaaaaaa-bbbb-cccc-dddd-eeeeffffffff"
    account_id_nullable:
      type: string
      readOnly: true
      example: "aaaaaaaa-bbbb-cccc-dddd-eeeeffffffff"
      nullable: true
    account_type: # e.g., regular user or admin--room to grow
      type: string
      readOnly: true
      enum: ["standard", "admin", "deleted"]
      example: "standard"
    language:
      type: string
      enum: ["en_US", "es_MX", "es_ES", "ja_JP"]
      example: "en_US"
    creation_time:
      type: string
      readOnly: true
      format: date-time
      example: "2007-04-05T12:30-02:00"
    email:
      type: string
      format: email
      example: "janedoe@example.com"
    first_name:        # Can be referenced as '#/components/schemas/first_name'
      type: string
      example: "Jane"
    last_name:
      type: string
      example: "Doe"
    language_tag:
      type: string
      example: "en_US"
    update_time:
      type: string
      readOnly: true
      format: date-time
      example: "2019-12-13T00:54:28.712Z"
    account:
      type: object
      properties:
        account_id:
          $ref: '#/components/schemas/account_id'
        first_name:
          $ref: '#/components/schemas/first_name'
        last_name:
          $ref: '#/components/schemas/last_name'
        email:
          $ref: '#/components/schemas/email'
        address:
          $ref: '#/components/schemas/address'
        account_type:
          $ref: '#/components/schemas/account_type'
        language:
          $ref: '#/components/schemas/language'
        creation_time:
          $ref: '#/components/schemas/creation_time'
        update_time:
          $ref: '#/components/schemas/update_time'
      required:
        - first_name
        - last_name
        - email
        - address
        - language

    address:   # taken from https://opensource.zalando.com/restful-api-guidelines/#address-fields
      description:
        an address of a location/destination
      type: object
      properties:
        street:
          description: |
            the full street address including house number and street name
          type: string
          example: 123 Main St. E., apt. 2
        city:
          description: |
            name of the city / locality
          type: string
          example: Springfield
        state:
          description: |
            state, province, or district; |
            set to empty string if not applicable |
            for country's address format (e.g. New Zealand)
          type: string
          example: "ON"
        post_code:
          description: |
            zip code or postal code
          type: string
          example: "K0H 9Z0"
        country_code:
          description: |
            the country code according to
            [iso-3166-1-alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
          type: string
          example: "CA" # NB: this is the country of *canada*, not the state of california
      required:
        - street
        - city
        - state
        - post_code
        - country_code

    # activation codes section
    activation_code:
      type: string
      example: TMI-XXXXX-XXXXX-XXXXX
    # kit section
    kit_name:
      type: string
      example: "jb_qhxqe"

    # sample section
    sample_barcode:
      type: string
      readOnly: true # sent in GET, not in POST/PUT/PATCH
      example: "000038448"
    sample_datetime:
      type: string
      format: date-time
      example: "2017-07-21T17:32:28Z"
      nullable: true
    sample_id:
      type: string
      readOnly: true # sent in GET, not in POST/PUT/PATCH
      example: "dae21127-27bb-4f52-9fd3-a2aa5eb5b86f"
    sample_notes:
      type: string
      nullable: true
      example: "Oops, I dropped it"
    sample_site:
      enum: ["Blood (skin prick)", "Saliva", "Ear wax", "Forehead", "Fur", "Hair", "Left hand", "Left leg", "Mouth", "Nares", "Nasal mucus",
             "Right hand", "Right leg", "Stool", "Tears", "Torso", "Vaginal mucus", null]
      example: "Stool"
    sample_edit_locked:
      type: boolean
      readOnly: true # sent in GET, not in POST/PUT/PATCH
      example: true
    sample_remove_locked:
      type: boolean
      readOnly: true # sent in GET, not in POST/PUT/PATCH
      example: true
    sample_projects:
      type: array
      readOnly: true # sent in GET, not in POST/PUT/PATCH
      nullable: true
      items:
        $ref: '#/components/schemas/sample_project'
      example:
        - "American Gut Project"
        - "British Gut Project"
    sample_project:
      type: string
      example: "British Gut Project"
    accession_urls:
      type: array
      readOnly: true
      nullable: true
      items:
        type: string
        example: "https://wherever.com"

    sample:
      type: object
      properties:
        sample_id:
          $ref: '#/components/schemas/sample_id'
        sample_barcode:
          $ref: '#/components/schemas/sample_barcode'
        sample_site:
          $ref: '#/components/schemas/sample_site'
        sample_edit_locked:
          $ref: '#/components/schemas/sample_edit_locked'
        sample_remove_locked:
          $ref: '#/components/schemas/sample_remove_locked'
        sample_datetime:
          $ref: '#/components/schemas/sample_datetime'
        sample_notes:
          $ref: '#/components/schemas/sample_notes'
        sample_projects:
          $ref: '#/components/schemas/sample_projects'
        source_id:
          $ref: '#/components/schemas/source_id_nullable'
        account_id:
          $ref: '#/components/schemas/account_id_nullable'
        accession_urls:
          $ref: '#/components/schemas/accession_urls'

    preparation:
      type: object
      properties:
        barcode:
          type: string
        preparation_id:
          type: integer
        preparation_type:
          type: string
        num_sequences:
          type: integer

    # source section
    source_id:
      type: string
      readOnly: true # sent in GET, not in POST/PUT/PATCH
      example: "b0b0b0b0-b0b0-b0b0-b0b0-b0b0b0b0b0b0"
    source_id_nullable:
      type: string
      readOnly: true # sent in GET, not in POST/PUT/PATCH
      example: "b0b0b0b0-b0b0-b0b0-b0b0-b0b0b0b0b0b0"
      nullable: true
    source_name:
      type: string
    source_type:
      type: string
      enum: [human, animal, environmental]
      example: human
    age_range:
      type: string
      enum: ["0-6", "7-12", "13-17", "18-plus", "legacy"]
    parent_1_name:
      type: string
      example: "Madre Doe"
    parent_2_name:
      type: string
      nullable: true
      example: "Padre Doe"
    deceased_parent:
      type: boolean
      example: false
    obtainer_name:
      type: string
      example: "Professor X"
    consent_id:
      type: string
    consent_type:
      type: string
    nonhuman_source:
      type: object
      properties:
        source_id:
          $ref: '#/components/schemas/source_id'
        source_type:
          type: string
          enum: [animal, environmental]
        source_name:
          type: string
        source_description:
          type: string
          nullable: true
      example:
        source_id: "bda6867f-fb9d-4f21-ba24-5fba64976ee2"
        source_name: "office windowsill"
        source_type: environmental
        source_description: "my office windowsill"
      additionalProperties: false
    human_source:
      type: object
      properties:
        source_id:
          $ref: '#/components/schemas/source_id'
        source_type:
          type: string
          enum: [human]
        source_name:
          type: string
        consent:
          type: object
          properties:
            age_range:
              $ref: '#/components/schemas/age_range'
            child_info:
              type: object
              properties:
                parent_1_name:
                  $ref: '#/components/schemas/parent_1_name'
                parent_2_name:
                  $ref: '#/components/schemas/parent_2_name'
                deceased_parent:
                  $ref: '#/components/schemas/deceased_parent'
                obtainer_name:
                  type: string
              additionalProperties: false
      additionalProperties: false

    # survey template section
    survey_template_id:
      type: integer
      example: 3
    survey_template_title:
      type: string
      example: "Personal Information"
    survey_template_type:
      type: string # someday could be an enum if we know choices
      example: "local"
    survey_template_version:
      type: string
      example: "0.1"
    survey_template_text:
      # The contents of this object ARE structured, but their structure is not specified in THIS api.
      # Could be *either* vue-compatible json to be used to generate an HTML form OR
      # a customized link to direct to an external survey
      type: object
      example: {
                  "groups": [
                    {
                      "legend": "Personal Information",
                      "fields": [
                        {
                          "type": "select",
                          "label": "Gender:",
                          "model": "107",
                          "id": "107",
                          "inputName": "107",
                          "featured": false,
                          "visible": true,
                          "disabled": false,
                          "required": true,
                          "multi": false,
                          "default": null,
                          "hint": null,
                          "help": null,
                          "validator": null,
                          "validateDebounceTime": null,
                          "styleClasses": null,
                          "buttons": null,
                          "attributes": null,
                          "values": [
                            "Unspecified",
                            "Male",
                            "Female",
                            "Other"
                          ],
                          "selectOptions": {}
                        },
                        {
                          "type": "input",
                          "label": "Height:",
                          "model": "108",
                          "id": "108",
                          "inputName": "108",
                          "featured": false,
                          "visible": true,
                          "disabled": false,
                          "required": true,
                          "multi": false,
                          "default": null,
                          "hint": null,
                          "help": null,
                          "validator": "string",
                          "validateDebounceTime": null,
                          "styleClasses": null,
                          "buttons": null,
                          "attributes": null,
                          "inputType": "text"
                        }
                      ]
                    }
                  ],
                  "fields": null
                }
    thin_survey_template_info:
      type: object
      properties:
        survey_template_id:
          $ref: '#/components/schemas/survey_template_id'
        survey_template_title:
          $ref: '#/components/schemas/survey_template_title'
        survey_template_version:
          $ref: '#/components/schemas/survey_template_version'
        survey_template_type:
          $ref: '#/components/schemas/survey_template_type'
      required:
        - survey_template_id
        - survey_template_title
        - survey_template_version
        - survey_template_type

    # survey section
    survey_id:
      type: string
      example: "69f697cb-8e52-4a4f-8db2-efffcfa186a5"
    survey_status:
      type: integer
      example: 3
      nullable: true
    survey_text:
      # The contents of this object ARE structured, but their structure is not specified in THIS api.
      type: object
      example: {
                    "1": "Omnivore",
                    "2": "No",
                    "3": "Never",
                    "4": "Never",
                    "5": "Daily",
                    "6": "No",
                    "107": "Female",
                    "108": "60",
                    "109": "inches",
                    "110": "Canada",
                    "111": "January",
                    "112": "1969",
                    "113": "120",
                    "114": "pounds",
                    "115": "44074",
                    "148": "United States",
                    "162": [
                      "Exclude refined sugars"
                    ]
                }

    # project section
    project_id:
      type: integer
      example: 1
      readOnly: true
    project_name:
      type: string
      nullable: false
    is_active:
      type: boolean
    project:
      type: "object"
      properties:
        project_id:
          $ref: '#/components/schemas/project_id'
        project_name:
          $ref: '#/components/schemas/project_name'
        is_microsetta:
          type: boolean
        bank_samples:
          type: boolean
        plating_start_date:
          type: string
          format: date
          example: "2017-07-21"
          nullable: true
        subproject_name:
          type: string
          nullable: true
        alias:
          type: string
          nullable: true
        sponsor:
          type: string
          nullable: true
        coordination:
          type: string
          nullable: true
        contact_name:
          type: string
          nullable: true
        additional_contact_name:
          type: string
          nullable: true
        contact_email:
          type: string
          format: email
          nullable: true
        deadlines:
          type: string
          nullable: true
        num_subjects:
          # no data type specified--this can be integer or string :-|
          nullable: true
        num_timepoints:
          # no data type specified--this can be integer or string :-|
          nullable: true
        start_date:
          type: string
          nullable: true
        disposition_comments:
          type: string
          nullable: true
        collection:
          type: string
          nullable: true
        is_fecal:
          type: string
          nullable: true
        is_saliva:
          type: string
          nullable: true
        is_skin:
          type: string
          nullable: true
        is_blood:
          type: string
          nullable: true
        is_other:
          type: string
          nullable: true
        do_16s:
          type: string
          nullable: true
        do_shallow_shotgun:
          type: string
          nullable: true
        do_shotgun:
          type: string
          nullable: true
        do_rt_qpcr:
          type: string
          nullable: true
        do_serology:
          type: string
          nullable: true
        do_metatranscriptomics:
          type: string
          nullable: true
        do_mass_spec:
          type: string
          nullable: true
        mass_spec_comments:
          type: string
          nullable: true
        mass_spec_contact_name:
          type: string
          nullable: true
        mass_spec_contact_email:
          type: string
          format: email
          nullable: true
        do_other:
          type: string
          nullable: true
        branding_associated_instructions:
          type: string
          nullable: true
        branding_status:
          type: string
          nullable: true
        is_active:
          $ref: '#/components/schemas/is_active'
      required:
        - project_name
        - is_microsetta
        - bank_samples

    # vioscreen section
    score_type:
      type: string
      example: "Hei2010"
    score_code:
      type: string
      example: "TotalVegetables"
    fc_code:
      type: string
      example: "acesupot"
    registration_code:
      type: string
      example: "TMI-UV94L-97JN7-MWUFX"
    creation_time:
      type: string
      readOnly: true
      format: date-time
      example: "2007-04-05T12:30-02:00"

    # error section
    Error: # Taken straight from https://swagger.io/docs/specification/describing-responses/
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
      required:
        - code
        - message

    # metadata section
    include_private:
      type: boolean
      default: false

  examples:
    human_adult_source:
      value:
        source_name: "Nell Doe"
        source_type: human
        consent:
          age_range: "18-plus"
    human_child_source:
      value:
        source_name: "K. Doe"
        source_type: human
        consent:
          age_range: "7-12"
          child_info:
            parent_1_name: "Maman Doe"
            parent_2_name: "Pere Doe"
            deceased_parent: false
            obtainer_name: "Maman M. Doe"
    nonhuman_source:
      value:
        source_name: "Fluffy"
        source_type: animal
        source_description: "A fluffy cat"
    human_adult_source_w_id:
      value:
        source_id: "5fa970c6-d36b-4d54-9bed-c45c3c85adac"
        source_name: "Nell Doe"
        source_type: human
        consent:
          age_range: "18-plus"
    human_child_source_w_id:
      value:
        source_id: "b06825c2-e808-4606-8819-861b0fa8a5ce"
        source_name: "K. Doe"
        source_type: human
        consent:
          age_range: "7-12"
          child_info:
            parent_1_name: "Maman Doe"
            parent_2_name: "Pere Doe"
            deceased_parent: false
            obtainer_name: "Maman M. Doe"
    nonhuman_source_w_id:
      value:
        source_id: "42f799a8-e814-4b91-a291-2dbd50fda75d"
        source_name: "Fluffy"
        source_type: animal
        source_description: "A fluffy cat"

# Defines the authRocket scheme: this is an OIDC jwt that comes in a bearer token header.
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: microsetta_private_api.api.verify_jwt

# END COMPONENTS
# This enables the authRocket securityScheme defined in components for all routes
security:
  - jwt: []
